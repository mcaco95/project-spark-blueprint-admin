/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new user */
        post: operations["registerUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Log in an existing user */
        post: operations["loginUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh an access token */
        post: operations["refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List current user's projects */
        get: operations["listProjects"];
        put?: never;
        /** Create a new project */
        post: operations["createProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a project by ID */
        get: operations["getProjectById"];
        /** Update a project by ID */
        put: operations["updateProject"];
        post?: never;
        /** Delete a project by ID */
        delete: operations["deleteProject"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_id}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List members of a project */
        get: operations["listProjectMembers"];
        put?: never;
        /** Add a member to a project */
        post: operations["addProjectMember"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/projects/{project_id}/members/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove a member from a project */
        delete: operations["removeProjectMember"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UserBase: {
            /** Format: email */
            email?: string;
            name?: string | null;
            /**
             * @default en
             * @enum {string|null}
             */
            language: "en" | "es" | null;
            /**
             * @default member
             * @enum {string|null}
             */
            role: "admin" | "member" | null;
        };
        UserPublic: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            created_at?: string;
        } & components["schemas"]["UserBase"];
        RegisterRequest: {
            name: string;
            /** Format: email */
            email: string;
            password: string;
        };
        LoginRequest: {
            /** Format: email */
            email: string;
            password: string;
        };
        Token: {
            access_token: string;
            refresh_token?: string | null;
            /** @default bearer */
            token_type: string;
        };
        LoginResponse: {
            user: components["schemas"]["UserPublic"];
        } & components["schemas"]["Token"];
        RefreshTokenRequest: {
            refresh_token: string;
        };
        RefreshTokenResponse: {
            access_token: string;
            /** @default bearer */
            token_type: string;
        };
        ErrorResponse: {
            error?: string;
            message?: string;
            details?: {
                [key: string]: unknown;
            } | null;
        };
        UserSimpleOutput: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            /** Format: email */
            email?: string;
        };
        /**
         * @description Status of the project
         * @enum {string}
         */
        ProjectStatusEnum: "planning" | "active" | "on-hold" | "completed" | "cancelled";
        /**
         * @description Priority of the project
         * @enum {string}
         */
        ProjectPriorityEnum: "low" | "medium" | "high";
        /**
         * @description Role of a user within a project
         * @enum {string}
         */
        ProjectRoleEnum: "editor" | "viewer";
        ProjectBase: {
            name?: string;
            description?: string | null;
            status?: components["schemas"]["ProjectStatusEnum"];
            priority?: components["schemas"]["ProjectPriorityEnum"];
            /** Format: date */
            start_date?: string | null;
            /** Format: date */
            due_date?: string | null;
            /**
             * Format: uuid
             * @description ID of the parent project, if any
             */
            parent_id?: string | null;
            /**
             * Format: int32
             * @default 0
             */
            progress: number;
        };
        ProjectCreateInput: {
            team_member_ids?: string[] | null;
        } & WithRequired<components["schemas"]["ProjectBase"], "name">;
        ProjectUpdateInput: {
            name?: string | null;
            description?: string | null;
            status?: components["schemas"]["ProjectStatusEnum"];
            priority?: components["schemas"]["ProjectPriorityEnum"];
            /** Format: date */
            start_date?: string | null;
            /** Format: date */
            due_date?: string | null;
            /** Format: uuid */
            parent_id?: string | null;
            /** Format: int32 */
            progress?: number | null;
            team_member_ids?: string[] | null;
        };
        ProjectOutput: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            owner_id?: string;
            owner?: components["schemas"]["UserSimpleOutput"];
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string | null;
            readonly members?: components["schemas"]["UserSimpleOutput"][];
        } & components["schemas"]["ProjectBase"];
        ProjectMemberOutput: {
            /** Format: uuid */
            user_id: string;
            role_in_project: components["schemas"]["ProjectRoleEnum"];
            user: components["schemas"]["UserSimpleOutput"];
            /** Format: date-time */
            added_at: string;
        };
        AddProjectMemberInput: {
            /**
             * Format: uuid
             * @description ID of the user to add to the project
             */
            user_id: string;
            /** @default viewer */
            role_in_project: components["schemas"]["ProjectRoleEnum"];
        };
    };
    responses: {
        /** @description Authentication information is missing or invalid. */
        UnauthorizedError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description User does not have permissions to perform this action. */
        ForbiddenError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description The requested resource was not found. */
        NotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description The request payload is malformed or invalid. */
        BadRequestError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    registerUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterRequest"];
            };
        };
        responses: {
            /** @description User registered successfully. Returns token and user info. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            /** @description Invalid input (e.g., validation error) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description User already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    loginUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Successful login */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            /** @description Invalid input (e.g., validation error for email/password format) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized (e.g., invalid credentials) */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    refreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshTokenRequest"];
            };
        };
        responses: {
            /** @description Access token refreshed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefreshTokenResponse"];
                };
            };
            /** @description Unauthorized (e.g., invalid or expired refresh token) */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listProjects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of projects */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectOutput"][];
                };
            };
            401: components["responses"]["UnauthorizedError"];
        };
    };
    createProject: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectCreateInput"];
            };
        };
        responses: {
            /** @description Project created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectOutput"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
        };
    };
    getProjectById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the project to retrieve */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectOutput"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    updateProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the project to update */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectUpdateInput"];
            };
        };
        responses: {
            /** @description Project updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectOutput"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    deleteProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the project to delete */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    listProjectMembers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the project */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of project members */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectMemberOutput"][];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    addProjectMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the project */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddProjectMemberInput"];
            };
        };
        responses: {
            /** @description Member added successfully (returns updated project) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectOutput"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
        };
    };
    removeProjectMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the project */
                project_id: string;
                /** @description ID of the user to remove */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Member removed successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            401: components["responses"]["UnauthorizedError"];
            403: components["responses"]["ForbiddenError"];
            404: components["responses"]["NotFoundError"];
        };
    };
}
type WithRequired<T, K extends keyof T> = T & {
    [P in K]-?: T[P];
};
